Elm.Main = Elm.Main || {};
Elm.Main.make = function (_elm) {
   "use strict";
   _elm.Main = _elm.Main || {};
   if (_elm.Main.values) return _elm.Main.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var delta = A2($Signal.map,$Time.inSeconds,$Time.fps(35));
   var make = F2(function (obj,shape) {
      return A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: obj.x,_1: obj.y},A2($Graphics$Collage.filled,$Color.white,shape));
   });
   var msg = "SPACE to start, WS and &uarr;&darr; to move";
   var textGreen = A3($Color.rgb,160,200,160);
   var txt = F2(function (f,string) {    return $Graphics$Element.leftAligned(f($Text.monospace(A2($Text.color,textGreen,$Text.fromString(string)))));});
   var pongGreen = A3($Color.rgb,60,100,60);
   var stepV = F3(function (v,lowerCollision,upperCollision) {    return lowerCollision ? $Basics.abs(v) : upperCollision ? 0 - $Basics.abs(v) : v;});
   var near = F3(function (k,c,n) {    return _U.cmp(n,k - c) > -1 && _U.cmp(n,k + c) < 1;});
   var within = F2(function (paddle,ball) {    return A3(near,paddle.x,8,ball.x) && A3(near,paddle.y,20,ball.y);});
   var physicsUpdate = F2(function (dt,obj) {    return _U.update(obj,{x: obj.x + obj.vx * dt,y: obj.y + obj.vy * dt});});
   var Input = F4(function (a,b,c,d) {    return {space: a,dir1: b,dir2: c,delta: d};});
   var input = A2($Signal.sampleOn,
   delta,
   A5($Signal.map4,
   Input,
   $Keyboard.space,
   A2($Signal.map,function (_) {    return _.y;},$Keyboard.wasd),
   A2($Signal.map,function (_) {    return _.y;},$Keyboard.arrows),
   delta));
   var Game = F4(function (a,b,c,d) {    return {state: a,ball: b,player1: c,player2: d};});
   var Player = F5(function (a,b,c,d,e) {    return {x: a,y: b,vx: c,vy: d,score: e};});
   var player = function (x) {    return A5(Player,x,0,0,0,0);};
   var Ball = F4(function (a,b,c,d) {    return {x: a,y: b,vx: c,vy: d};});
   var Pause = {ctor: "Pause"};
   var Play = {ctor: "Play"};
   var _p0 = {ctor: "_Tuple2",_0: 300,_1: 200};
   var halfWidth = _p0._0;
   var halfHeight = _p0._1;
   var defaultGame = {state: Pause,ball: A4(Ball,0,0,200,200),player1: player(20 - halfWidth),player2: player(halfWidth - 20)};
   var updateBall = F4(function (dt,ball,paddle1,paddle2) {
      return $Basics.not(A3(near,0,halfWidth,ball.x)) ? _U.update(ball,{x: 0,y: 0}) : A2(physicsUpdate,
      dt,
      _U.update(ball,
      {vx: A3(stepV,ball.vx,A2(within,paddle1,ball),A2(within,paddle2,ball))
      ,vy: A3(stepV,ball.vy,_U.cmp(ball.y,7 - halfHeight) < 0,_U.cmp(ball.y,halfHeight - 7) > 0)}));
   });
   var updatePlayer = F4(function (dt,dir,points,player) {
      var movedPlayer = A2(physicsUpdate,dt,_U.update(player,{vy: $Basics.toFloat(dir) * 200}));
      return _U.update(movedPlayer,{y: A3($Basics.clamp,22 - halfHeight,halfHeight - 22,movedPlayer.y),score: player.score + points});
   });
   var update = F2(function (_p2,_p1) {
      var _p3 = _p2;
      var _p9 = _p3.delta;
      var _p4 = _p1;
      var _p8 = _p4.state;
      var _p7 = _p4.player2;
      var _p6 = _p4.player1;
      var _p5 = _p4.ball;
      var newBall = _U.eq(_p8,Pause) ? _p5 : A4(updateBall,_p9,_p5,_p6,_p7);
      var score2 = _U.cmp(_p5.x,0 - halfWidth) < 0 ? 1 : 0;
      var score1 = _U.cmp(_p5.x,halfWidth) > 0 ? 1 : 0;
      var newState = _p3.space ? Play : !_U.eq(score1,score2) ? Pause : _p8;
      return _U.update(_p4,{state: newState,ball: newBall,player1: A4(updatePlayer,_p9,_p3.dir1,score1,_p6),player2: A4(updatePlayer,_p9,_p3.dir2,score2,_p7)});
   });
   var gameState = A3($Signal.foldp,update,defaultGame,input);
   var _p10 = {ctor: "_Tuple2",_0: 600,_1: 400};
   var gameWidth = _p10._0;
   var gameHeight = _p10._1;
   var view = F2(function (_p11,game) {
      var _p12 = _p11;
      var scores = A2(txt,
      $Text.height(50),
      A2($Basics._op["++"],$Basics.toString(game.player1.score),A2($Basics._op["++"],"  ",$Basics.toString(game.player2.score))));
      return A4($Graphics$Element.container,
      _p12._0,
      _p12._1,
      $Graphics$Element.middle,
      A3($Graphics$Collage.collage,
      gameWidth,
      gameHeight,
      _U.list([A2($Graphics$Collage.filled,pongGreen,A2($Graphics$Collage.rect,gameWidth,gameHeight))
              ,A2(make,game.ball,A2($Graphics$Collage.oval,15,15))
              ,A2(make,game.player1,A2($Graphics$Collage.rect,10,40))
              ,A2(make,game.player2,A2($Graphics$Collage.rect,10,40))
              ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: 0,_1: gameHeight / 2 - 40},$Graphics$Collage.toForm(scores))
              ,A2($Graphics$Collage.move,
              {ctor: "_Tuple2",_0: 0,_1: 40 - gameHeight / 2},
              $Graphics$Collage.toForm(_U.eq(game.state,Play) ? A2($Graphics$Element.spacer,1,1) : A2(txt,$Basics.identity,msg)))])));
   });
   var main = A3($Signal.map2,view,$Window.dimensions,gameState);
   return _elm.Main.values = {_op: _op
                             ,gameHeight: gameHeight
                             ,gameWidth: gameWidth
                             ,halfHeight: halfHeight
                             ,halfWidth: halfWidth
                             ,Play: Play
                             ,Pause: Pause
                             ,Ball: Ball
                             ,Player: Player
                             ,Game: Game
                             ,player: player
                             ,defaultGame: defaultGame
                             ,Input: Input
                             ,update: update
                             ,updateBall: updateBall
                             ,updatePlayer: updatePlayer
                             ,physicsUpdate: physicsUpdate
                             ,near: near
                             ,within: within
                             ,stepV: stepV
                             ,view: view
                             ,pongGreen: pongGreen
                             ,textGreen: textGreen
                             ,txt: txt
                             ,msg: msg
                             ,make: make
                             ,main: main
                             ,gameState: gameState
                             ,delta: delta
                             ,input: input};
};